aes(x = cots_density_ha, y = estimate__),
color = "#007A87", linewidth = 1) +
geom_ribbon(data = effects_df,
aes(x = cots_density_ha, ymin = lower__, ymax = upper__),
fill = "#66BFA6", alpha = 0.2) +
facet_wrap(~ Functional_Group, scales = "free_y") +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Fish density (" * ha^{-1} * ")"),
title = "CoTS Effects on Fish Functional Groups (Model vs. Observed)"
) +
theme_minimal(base_size = 15) +
theme_clean +  theme(strip.text = element_text(size = 15))
ce_with_raw <- ggplot() +
geom_point(data = raw_for_plot,
aes(x = cots_density_ha, y = fish_density),
alpha = 0.5, size = 1) +
geom_line(data = effects_df,
aes(x = cots_density_ha, y = estimate__),
color = "#007A87", linewidth = 1) +
geom_ribbon(data = effects_df,
aes(x = cots_density_ha, ymin = lower__, ymax = upper__),
fill = "#66BFA6", alpha = 0.2) +
facet_wrap(~ Functional_Group, scales = "free_y") +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Fish density (" * ha^{-1} * ")"),
title = "CoTS Effects on Fish Functional Groups (Model vs. Observed)"
) +
theme_minimal(base_size = 15) +
theme_clean +  theme(strip.text = element_text(size = 15))
print(ce_with_raw)
allfish <- ggplot() +
geom_point(data = total_fish_df,
aes(x = cots_density_ha, y = total_fish_density),
alpha = 0.6, size = 1) +
geom_line(data = ce_total,
aes(x = cots_density_ha, y = estimate__),
color = "#007A87", linewidth = 1) +
geom_ribbon(data = ce_total,
aes(x = cots_density_ha, ymin = lower__, ymax = upper__),
fill = "#66BFA6", alpha = 0.2) +
theme_minimal(base_size = 13)  +  theme_clean + theme(strip.text = element_text(size = 13)) +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Total fish density (" * ha^{-1} * ")"),
title = "Effect of CoTS Density on Total Fish Density"
)
print(allfish)
fish_shapes <- tibble::tribble(
~sci_name,                                 ~family,           ~option,
"Scarus spp.",                             "Labridae",        "Scarus.oviceps",
"Siganus spp.",                            "Siganidae",       "Siganus.virgatus",
"Chaetodon spp.",                          "Chaetodontidae",  "Chaetodon.trifasciatus",
"Pomacanthus spp.",                        "Pomacanthidae",   "Pomacanthus.imperator",
"Labroides dimidiatus",                    "Labridae",        "Labroides.dimidiatus",
"Hemigymnus melapterus",                   "Labridae",        "Chlorurus.sordidus",        # closest match
"Cheilinus fasciatus",                     "Labridae",        "Epibulus.insidiator",       # closest match
"Epibulus insidiator",                     "Labridae",        "Epibulus.insidiator",
"Diagramma/ Plectorhinchus spp.",          "Haemulidae",      "Plectorhinchus.gibbosus",
"Holocentridae spp.",                      "Holocentridae",   "Myripristis.violacea",
"Balistidae spp.",                         "Balistidae",      "Balistapus.undulatus",
"Lutjanus (<30cm) spp.",                   "Lutjanidae",      "Lutjanus.gibbus",
"Lutjanus (>30 cm) spp.",                  "Lutjanidae",      "Lutjanus.gibbus",
"Caranx spp.",                             "Carangidae",      "Caranx.melampygus",
"Lethrinus spp.",                          "Lethrinidae",     "Lethrinus.nebulosus",
"Cephalopholis/ Epinephelus spp.",         "Serranidae",      "Epinephelus.merra",
"Epinephelus (>30cm)/Plectropomus spp.",   "Serranidae",      "Epinephelus.malabaricus"
)
# Construct shape filename from family and option
fish_shapes <- fish_shapes %>%
mutate(
shape_file = paste0(family, "_", option, ".png"),
shape_path = file.path("shapes", shape_file)  # adjust path if needed
)
effects_df4 <- effects_df4 %>%
mutate(display_name = case_when(
sci_name == "Epinephelus (>30cm)/Plectropomus spp." ~ "Epinephelus /\nPlectropomus spp.",
sci_name == "Cephalopholis/ Epinephelus spp." ~ "Cephalopholis /\nEpinephelus spp.",
sci_name == "Diagramma/ Plectorhinchus spp." ~ "Diagramma /\nPlectorhinchus spp.",
TRUE ~ sci_name
))
add_fish_shape <- function(sci_name, x = 0.95, y = 0.95, base_height = 0.2, alpha = 0.6) {
shape_row <- fish_shapes %>% filter(sci_name == !!sci_name)
if (nrow(shape_row) == 0 || !file.exists(shape_row$shape_path)) return(NULL)
img <- tryCatch(readPNG(shape_row$shape_path, native = FALSE), error = function(e) NULL)
if (is.null(img)) return(NULL)
# Add or modify alpha layer
if (length(dim(img)) == 3) {
if (dim(img)[3] == 3) {
alpha_layer <- array(alpha, dim = c(dim(img)[1], dim(img)[2], 1))
img <- abind::abind(img, alpha_layer, along = 3)
} else if (dim(img)[3] == 4) {
img[,,4] <- img[,,4] * alpha
}
}
# Use original aspect ratio to compute width from height
img_height <- dim(img)[1]
img_width  <- dim(img)[2]
aspect_ratio <- img_width / img_height  # width = height * aspect_ratio
annotation_custom(
rasterGrob(img, x = x, y = y,
width = unit(base_height * aspect_ratio, "npc"),
height = unit(base_height, "npc"),
just = c("right", "top"),
interpolate = TRUE),
xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf
)
}
plots_by_group6 <- lapply(unique(functional_taxa$Functional_Group), function(group_name) {
df_ce <- effects_df4 %>% filter(Functional_Group == group_name)
df_raw <- spp_long %>%
left_join(functional_taxa, by = "Resp") %>%
filter(Functional_Group == group_name)
plots <- lapply(split(df_ce, df_ce$sci_name), function(df_species) {
species <- unique(df_species$sci_name)
df_raw_species <- df_raw %>% filter(sci_name == species)
p <- ggplot(df_species, aes(x = cots_density_ha, y = estimate__)) +
geom_point(
data = df_raw_species,
aes(x = cots_density_ha, y = fish_density),
inherit.aes = FALSE,
alpha = 0.4, size = 1.3, color = "#008080"
) +
geom_line(color = "#007A87", lwd = 1) +
geom_ribbon(aes(ymin = lower__, ymax = upper__), fill = "#66BFA6", alpha = 0.2) +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Fish density (" * ha^{-1} * ")"),
title = species
) +
theme_minimal(base_size = 16) + theme_clean +
theme(
axis.title.x = element_text(size = 14),  # X-axis title
axis.title.y = element_text(size = 14),  # Y-axis title
strip.text = element_text(face = "italic", size = 16),  # Facet strip titles
plot.title = element_text(face = "italic", size = 16, hjust = 0.5)
) +
add_fish_shape(species)
return(p)
})
# Combine into patchwork layout if desired, or return list
patchwork::wrap_plots(plots)
})
names(plots_by_group6) <- unique(functional_taxa$Functional_Group)
# Access individual groups
herb_spp <- plots_by_group6$Herbivore
print(herb_spp)
invert_spp <- plots_by_group6$Invertivore
meso_spp<- plots_by_group6$Mesopredator
htlp_spp <- plots_by_group6$HTLP
print(herb_spp)
print(invert_spp)
print(meso_spp)
print(htlp_spp)
library(patchwork)
# Remove individual axis labels inside each plot
spp_plots <- lapply(split(effects_df4, effects_df4$sci_name), function(df_spp) {
species <- unique(df_spp$sci_name)
ggplot(df_spp, aes(x = cots_density_ha, y = estimate__)) +
geom_line(color = "#007A87", lwd = 1) +
geom_ribbon(aes(ymin = lower__, ymax = upper__), fill = "#66BFA6", alpha = 0.2) +
labs(title = species) +  # No x/y labels here
theme_minimal(base_size = 13) + theme_clean +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(face = "italic", size = 13, hjust = 0.5)
) +
add_fish_shape(species)
})
# Combine all plots
plot_all_spp2 <- wrap_plots(spp_plots, guides = "collect") +
plot_annotation(
title = " ",
theme = theme(
plot.title = element_text(face = "italic", size = 16, hjust = 0.5),
plot.margin = margin(10, 10, 10, 10),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)
)
)
final_plot <- plot_all_spp2 +
plot_annotation(
theme = theme(
axis.title.x = element_text(family = "Times New Roman", size = 15, margin = margin(t = 10)),
axis.title.y = element_text(family = "Times New Roman", size = 15, margin = margin(r = 10))
)
) &
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Fish density (" * ha^{-1} * ")")
)
# Print it
print(final_plot)
# Combine and rejoin sci_name and group
effects_df4 <- bind_rows(ce_list4) %>%
left_join(functional_taxa, by = "Resp")
# add raw observations to the plots
# Convert wide data to long for raw observations
spp_long <- spp_wide %>%
pivot_longer(cols = all_of(modeled_species),
names_to = "Species",
values_to = "fish_density") %>%
mutate(Resp = gsub("_", "", Species))
library(brms)
library(posterior)
library(dplyr)
library(purrr)
library(tibble)
library(fishualize)
library(ggplot2)
library(rfishbase)
library(cowplot)
library(ggtext)
# Combine and rejoin sci_name and group
effects_df4 <- bind_rows(ce_list4) %>%
left_join(functional_taxa, by = "Resp")
# add raw observations to the plots
# Convert wide data to long for raw observations
spp_long <- spp_wide %>%
pivot_longer(cols = all_of(modeled_species),
names_to = "Species",
values_to = "fish_density") %>%
mutate(Resp = gsub("_", "", Species))
library(tibble)
library(fishualize)
library(png)
library(grid)
fish_shapes <- tibble::tribble(
~sci_name,                                 ~family,           ~option,
"Scarus spp.",                             "Labridae",        "Scarus.oviceps",
"Siganus spp.",                            "Siganidae",       "Siganus.virgatus",
"Chaetodon spp.",                          "Chaetodontidae",  "Chaetodon.trifasciatus",
"Pomacanthus spp.",                        "Pomacanthidae",   "Pomacanthus.imperator",
"Labroides dimidiatus",                    "Labridae",        "Labroides.dimidiatus",
"Hemigymnus melapterus",                   "Labridae",        "Chlorurus.sordidus",        # closest match
"Cheilinus fasciatus",                     "Labridae",        "Epibulus.insidiator",       # closest match
"Epibulus insidiator",                     "Labridae",        "Epibulus.insidiator",
"Diagramma/ Plectorhinchus spp.",          "Haemulidae",      "Plectorhinchus.gibbosus",
"Holocentridae spp.",                      "Holocentridae",   "Myripristis.violacea",
"Balistidae spp.",                         "Balistidae",      "Balistapus.undulatus",
"Lutjanus (<30cm) spp.",                   "Lutjanidae",      "Lutjanus.gibbus",
"Lutjanus (>30 cm) spp.",                  "Lutjanidae",      "Lutjanus.gibbus",
"Caranx spp.",                             "Carangidae",      "Caranx.melampygus",
"Lethrinus spp.",                          "Lethrinidae",     "Lethrinus.nebulosus",
"Cephalopholis/ Epinephelus spp.",         "Serranidae",      "Epinephelus.merra",
"Epinephelus (>30cm)/Plectropomus spp.",   "Serranidae",      "Epinephelus.malabaricus"
)
# Construct shape filename from family and option
fish_shapes <- fish_shapes %>%
mutate(
shape_file = paste0(family, "_", option, ".png"),
shape_path = file.path("shapes", shape_file)  # adjust path if needed
)
effects_df4 <- effects_df4 %>%
mutate(display_name = case_when(
sci_name == "Epinephelus (>30cm)/Plectropomus spp." ~ "Epinephelus /\nPlectropomus spp.",
sci_name == "Cephalopholis/ Epinephelus spp." ~ "Cephalopholis /\nEpinephelus spp.",
sci_name == "Diagramma/ Plectorhinchus spp." ~ "Diagramma /\nPlectorhinchus spp.",
TRUE ~ sci_name
))
add_fish_shape <- function(sci_name, x = 0.95, y = 0.95, base_height = 0.2, alpha = 0.6) {
shape_row <- fish_shapes %>% filter(sci_name == !!sci_name)
if (nrow(shape_row) == 0 || !file.exists(shape_row$shape_path)) return(NULL)
img <- tryCatch(readPNG(shape_row$shape_path, native = FALSE), error = function(e) NULL)
if (is.null(img)) return(NULL)
# Add or modify alpha layer
if (length(dim(img)) == 3) {
if (dim(img)[3] == 3) {
alpha_layer <- array(alpha, dim = c(dim(img)[1], dim(img)[2], 1))
img <- abind::abind(img, alpha_layer, along = 3)
} else if (dim(img)[3] == 4) {
img[,,4] <- img[,,4] * alpha
}
}
# Use original aspect ratio to compute width from height
img_height <- dim(img)[1]
img_width  <- dim(img)[2]
aspect_ratio <- img_width / img_height  # width = height * aspect_ratio
annotation_custom(
rasterGrob(img, x = x, y = y,
width = unit(base_height * aspect_ratio, "npc"),
height = unit(base_height, "npc"),
just = c("right", "top"),
interpolate = TRUE),
xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf
)
}
plots_by_group6 <- lapply(unique(functional_taxa$Functional_Group), function(group_name) {
df_ce <- effects_df4 %>% filter(Functional_Group == group_name)
df_raw <- spp_long %>%
left_join(functional_taxa, by = "Resp") %>%
filter(Functional_Group == group_name)
plots <- lapply(split(df_ce, df_ce$sci_name), function(df_species) {
species <- unique(df_species$sci_name)
df_raw_species <- df_raw %>% filter(sci_name == species)
p <- ggplot(df_species, aes(x = cots_density_ha, y = estimate__)) +
geom_point(
data = df_raw_species,
aes(x = cots_density_ha, y = fish_density),
inherit.aes = FALSE,
alpha = 0.4, size = 1.3, color = "#008080"
) +
geom_line(color = "#007A87", lwd = 1) +
geom_ribbon(aes(ymin = lower__, ymax = upper__), fill = "#66BFA6", alpha = 0.2) +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Fish density (" * ha^{-1} * ")"),
title = species
) +
theme_minimal(base_size = 16) + theme_clean +
theme(
axis.title.x = element_text(size = 14),  # X-axis title
axis.title.y = element_text(size = 14),  # Y-axis title
strip.text = element_text(face = "italic", size = 16),  # Facet strip titles
plot.title = element_text(face = "italic", size = 16, hjust = 0.5)
) +
add_fish_shape(species)
return(p)
})
# Combine into patchwork layout if desired, or return list
patchwork::wrap_plots(plots)
})
names(plots_by_group6) <- unique(functional_taxa$Functional_Group)
# Access individual groups
herb_spp <- plots_by_group6$Herbivore
print(herb_spp)
invert_spp <- plots_by_group6$Invertivore
meso_spp<- plots_by_group6$Mesopredator
htlp_spp <- plots_by_group6$HTLP
print(herb_spp)
print(invert_spp)
print(meso_spp)
print(htlp_spp)
library(patchwork)
# Remove individual axis labels inside each plot
spp_plots <- lapply(split(effects_df4, effects_df4$sci_name), function(df_spp) {
sci <- unique(df_spp$sci_name)           # for silhouette matching
label <- unique(df_spp$display_name)     # for display title
ggplot(df_spp, aes(x = cots_density_ha, y = estimate__)) +
geom_line(color = "#007A87", lwd = 1) +
geom_ribbon(aes(ymin = lower__, ymax = upper__), fill = "#66BFA6", alpha = 0.2) +
labs(title = species) +  # No x/y labels here
theme_minimal(base_size = 13) + theme_clean +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(face = "italic", size = 13, hjust = 0.5)
) +
add_fish_shape(spo)
})
# Remove individual axis labels inside each plot
spp_plots <- lapply(split(effects_df4, effects_df4$sci_name), function(df_spp) {
sci <- unique(df_spp$sci_name)           # for silhouette matching
label <- unique(df_spp$display_name)     # for display title
ggplot(df_spp, aes(x = cots_density_ha, y = estimate__)) +
geom_line(color = "#007A87", lwd = 1) +
geom_ribbon(aes(ymin = lower__, ymax = upper__), fill = "#66BFA6", alpha = 0.2) +
labs(title = species) +  # No x/y labels here
theme_minimal(base_size = 13) + theme_clean +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(face = "italic", size = 13, hjust = 0.5)
) +
add_fish_shape(sci)
})
# Combine all plots
plot_all_spp2 <- wrap_plots(spp_plots, guides = "collect") +
plot_annotation(
title = " ",
theme = theme(
plot.title = element_text(face = "italic", size = 16, hjust = 0.5),
plot.margin = margin(10, 10, 10, 10),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)
)
)
final_plot <- plot_all_spp2 +
plot_annotation(
theme = theme(
axis.title.x = element_text(family = "Times New Roman", size = 15, margin = margin(t = 10)),
axis.title.y = element_text(family = "Times New Roman", size = 15, margin = margin(r = 10))
)
) &
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Fish density (" * ha^{-1} * ")")
)
# Print it
print(final_plot)
View(effects_df4)
# Remove individual axis labels inside each plot
spp_plots <- lapply(split(effects_df4, effects_df4$sci_name), function(df_spp) {
sci <- unique(df_spp$sci_name)           # for silhouette matching
label <- unique(df_spp$display_name)     # for display title
ggplot(df_spp, aes(x = cots_density_ha, y = estimate__)) +
geom_line(color = "#007A87", lwd = 1) +
geom_ribbon(aes(ymin = lower__, ymax = upper__), fill = "#66BFA6", alpha = 0.2) +
labs(title = species) +  # No x/y labels here
theme_minimal(base_size = 13) + theme_clean +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(face = "italic", size = 13, hjust = 0.5)
) + if (!is.null(add_fish_shape(sci))) add_fish_shape(sci)
})
# Combine all plots
plot_all_spp2 <- wrap_plots(spp_plots, guides = "collect") +
plot_annotation(
title = " ",
theme = theme(
plot.title = element_text(face = "italic", size = 16, hjust = 0.5),
plot.margin = margin(10, 10, 10, 10),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)
)
)
final_plot <- plot_all_spp2 +
plot_annotation(
theme = theme(
axis.title.x = element_text(family = "Times New Roman", size = 15, margin = margin(t = 10)),
axis.title.y = element_text(family = "Times New Roman", size = 15, margin = margin(r = 10))
)
) &
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Fish density (" * ha^{-1} * ")")
)
# Print it
print(final_plot)
# Remove individual axis labels inside each plot
spp_plots <- lapply(split(effects_df4, effects_df4$sci_name), function(df_spp) {
sci <- unique(df_spp$sci_name)
label <- unique(df_spp$display_name)
base_plot <- ggplot(df_spp, aes(x = cots_density_ha, y = estimate__)) +
geom_line(color = "#007A87", lwd = 1) +
geom_ribbon(aes(ymin = lower__, ymax = upper__), fill = "#66BFA6", alpha = 0.2) +
labs(title = label) +
theme_minimal(base_size = 13) + theme_clean +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(face = "italic", size = 13, hjust = 0.5)
)
fish_layer <- add_fish_shape(sci)
if (!is.null(fish_layer)) {
base_plot + fish_layer
} else {
base_plot
}
})
# Combine all plots
plot_all_spp2 <- wrap_plots(spp_plots, guides = "collect") +
plot_annotation(
title = " ",
theme = theme(
plot.title = element_text(face = "italic", size = 16, hjust = 0.5),
plot.margin = margin(10, 10, 10, 10),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)
)
)
final_plot <- plot_all_spp2 +
plot_annotation(
theme = theme(
axis.title.x = element_text(family = "Times New Roman", size = 15, margin = margin(t = 10)),
axis.title.y = element_text(family = "Times New Roman", size = 15, margin = margin(r = 10))
)
) &
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Fish density (" * ha^{-1} * ")")
)
# Print it
print(final_plot)
fungroups
# fungroups
print(ce_with_raw)
# total fish
print(allfish)
# spp specific
print(plot_all_spp)
print(herb_spp)
print(invert_spp)
print(meso_spp)
print(htlp_spp)
save_analysis_plots <- function() {
# Define the list of plots and filenames
plots <- list(
"fungroup_conditional_effects_raw.png" = ce_with_raw,
"fungroup_conditional_effects_mv.png"  = ce_mv_plot,
"total_fish.png"                       = allfish,
"species_all_facets.png"              = plot_all_spp,
"species_herbivores.png"              = herb_spp,
"species_invertivores.png"            = invert_spp,
"species_mesopredators.png"           = meso_spp,
"species_htlp.png"                    = htlp_spp
)
# Loop through and save each one
for (filename in names(plots)) {
ggsave(
filename = file.path(output_dir, filename),
plot = plots[[filename]],
width = 10, height = 6, dpi = 300
)
}
}
save_analysis_plots()
# ==== Completion Message ====
cat("✅ Analysis complete! Data and plots saved in:", output_dir, "\n")
