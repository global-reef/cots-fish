cots_monthly <- raw_cots %>%
mutate(Date = mdy(Date_mm.dd.yyyy),
Month = floor_date(Date, "month"),
Site = tolower(trimws(Site))) %>%
mutate(Site = case_when(
Site == "green rock wall" ~ "green rock",
Site == "red rock wall" ~ "red rock",
TRUE ~ Site
)) %>%
group_by(Site, Date) %>%
summarise(CoTS_count = n(), .groups = "drop") %>%
mutate(Month = floor_date(Date, "month")) %>%
group_by(Site, Month) %>%
summarise(cots = ceiling(mean(CoTS_count)), .groups = "drop") %>%
mutate(cots_density_ha = cots / 0.2)
# ==== Final Join: Preserve full fish survey resolution ====
cotsxfish <- clean_fish %>%
mutate(Month = floor_date(Date, "month")) %>%
left_join(cots_monthly, by = c("Site", "Month")) %>%
filter(!is.na(cots_density_ha)) %>%
mutate(fish_density_ha = fish / 0.2,
Survey_ID = paste(Site, format(Date, "%d-%b-%y"), sep = "-"))
# ==== Save cleaned dataset ====
write_csv(cotsxfish, file.path(output_dir, "cotsxfish.csv"))
# ==== Completion Message ====
cat("✅ Analysis complete! Data and plots saved in:", output_dir, "\n")
unique(cotsxfish$Species)
source("~/Documents/1_GLOBAL REEF/0_PROJECTS/COTSxFISH/3_ANALYSIS/COTSxFISH/02.1_TOTALFISH.R")
summary(fit_total)
source("~/Documents/1_GLOBAL REEF/0_PROJECTS/COTSxFISH/3_ANALYSIS/COTSxFISH/02_MODEL_FUNGROUPS.R")
summary(fit_mv)
print(posterior_probs_fg)
print(posterior_probs_total)
summary(fit_total)
summary(fit_mv)
print(posterior_probs_fg)
modeled_species <- c("Angelfish", "Butterflyfish", "Cleaner_Wrasse", "Emperorfish",
"Parrotfish", "Rabbitfish", "Red_Breast", "Slingjaw",
"Squirrel.Soldier", "Sweetlips", "Thicklip", "Trevally",
"Triggerfish", "lrg_Grouper", "lrg_Snapper", "sml_Grouper", "sml_Snapper")
spp_wide <- cotsxfish %>%
pivot_wider(
id_cols = c(Survey_ID, Site, cots_density_ha),
names_from = Species,
values_from = fish_density_ha
)
# Create separate formulas for each species
form_list <- lapply(modeled_species, function(sp) {
bf(as.formula(paste0("`", sp, "` ~ s(cots_density_ha) + (1 | Site)")), family = negbinomial())
})
#### run the model ####
fit_spp <- brm(
formula = do.call(mvbf, form_list),
data = spp_wide,
chains = 4, cores = 4,
iter = 2000, warmup = 500,
control = list(adapt_delta = 0.99)
)
# Ensure Species names match those in the model
valid_responses <- c("Angelfish", "Butterflyfish", "CleanerWrasse", "Emperorfish",
"Parrotfish", "Rabbitfish", "RedBreast", "Slingjaw",
"SquirrelSoldier", "Sweetlips", "Thicklip", "Trevally",
"Triggerfish", "lrgGrouper", "lrgSnapper", "smlGrouper", "smlSnapper")
# If necessary, add this as a column to functional_taxa
functional_taxa <- functional_taxa |>
dplyr::mutate(Resp = gsub("_", "", Species)) |>  # assumes Species was e.g., Red_Breast
dplyr::filter(Resp %in% valid_responses)
# Extract conditional effects using the correct names
ce_list4 <- lapply(functional_taxa$Resp, function(resp) {
ce <- conditional_effects(fit_spp, resp = resp, effects = "cots_density_ha")[[1]]
ce$Resp <- resp
return(ce)
})
# Combine and rejoin sci_name and group
effects_df4 <- bind_rows(ce_list4) %>%
left_join(functional_taxa, by = "Resp")
# Plot per group
plots_by_group4 <- split(effects_df4, effects_df4$Functional_Group)
plots_by_group4 <- lapply(plots_by_group4, function(df) {
ggplot(df, aes(x = cots_density_ha, y = estimate__)) +
geom_line() +
geom_ribbon(aes(ymin = lower__, ymax = upper__), alpha = 0.2) +
facet_wrap(~ sci_name, scales = "free_y") +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Predicted fish density (" * ha^{-1} * ")")
) +
theme_minimal(base_size = 13) + theme_clean +
theme(strip.text = element_text(face = "italic", size = 14))
})
herb_spp <- plots_by_group4$Herbivore
invert_spp <- plots_by_group4$Invertivore
meso_spp <- plots_by_group4$Mesopredator
htlp_spp <- plots_by_group4$HTLP
plot_all_spp <- ggplot(effects_df4, aes(x = cots_density_ha, y = estimate__)) +
geom_line() +
geom_ribbon(aes(ymin = lower__, ymax = upper__), alpha = 0.2) +
facet_wrap(~ sci_name, scales = "free_y") +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Predicted fish density (" * ha^{-1} * ")"),
title = "Species-specific responses to Crown-of-Thorns density"
) +
theme_minimal(base_size = 13) + theme_clean +
theme(
strip.text = element_text(face = "italic", size = 12)
)
print(plot_all_spp)
print(herb_spp)
print(invert_spp)
print(meso_spp)
print(htlp_spp)
###### extract posterior predictions ######
# Extract posterior draws as a data frame
post <- as_draws_df(fit_spp)
# Define species of interest
spp_terms <- c(
"Angelfish", "Butterflyfish", "CleanerWrasse", "Emperorfish", "Parrotfish",
"Rabbitfish", "RedBreast", "Slingjaw", "SquirrelSoldier", "Sweetlips",
"Thicklip", "Trevally", "Triggerfish", "lrgGrouper", "lrgSnapper", "smlGrouper", "smlSnapper"
)
# Function to compute posterior probabilities
get_posterior_probs <- function(fit, species) {
post <- as_draws_df(fit)
results <- lapply(species, function(sp) {
term <- paste0("bs_", sp, "_scots_density_ha_1")
if (!term %in% colnames(post)) return(NULL)
samples <- post[[term]]
data.frame(
Species = sp,
P_gt_0 = mean(samples > 0, na.rm = TRUE),
P_lt_0 = mean(samples < 0, na.rm = TRUE)
)
})
do.call(rbind, results)
}
# Run function
posterior_probs <- get_posterior_probs(fit_spp, spp_terms)
print(posterior_probs)
# print(post_probs_summary)
summary(fit_spp)
print(posterior_probs_fg)
save_analysis_plots <- function() {
# Define the list of plots and filenames
plots <- list(
"fungroup_conditional_effects_raw.png" = ce_with_raw,
"fungroup_conditional_effects_mv.png"  = ce_mv_plot,
"total_fish.png"                       = allfish,
"species_all_facets.png"              = plot_all_spp,
"species_herbivores.png"              = herb_spp,
"species_invertivores.png"            = invert_spp,
"species_mesopredators.png"           = meso_spp,
"species_htlp.png"                    = htlp_spp
)
# Loop through and save each one
for (filename in names(plots)) {
ggsave(
filename = file.path(output_dir, filename),
plot = plots[[filename]],
width = 10, height = 6, dpi = 300
)
}
}
save_analysis_plots()
# ==== Completion Message ====
cat("✅ Analysis complete! Data and plots saved in:", output_dir, "\n")
print(herb_spp)
# spp specific
print(plot_all_spp)
# ==== Functional Group Reference ====
functional_taxa <- tibble::tribble(
~Species,            ~Functional_Group, ~Genus,                ~Species_epithet, ~sci_name,
"Parrotfish",        "Herbivore",       "Scarus",              "spp.",           "Scarus spp.",
"Rabbitfish",        "Herbivore",       "Siganus",             "spp.",           "Siganus spp.",
"Butterflyfish",     "Invertivore",       "Chaetodon",           "spp.",          "Chaetodon spp.",
"Angelfish",         "Invertivore",     "Pomacanthus",         "spp.",           "Pomacanthus spp.",
"Cleaner_Wrasse",    "Invertivore",     "Labroides",           "dimidiatus",     "Labroides dimidiatus",
"Batfish",           "Invertivore",     "Ephippidae",          "spp.",           "Ephippidae spp.",
"Thicklip",          "Invertivore",     "Hemigymnus",          "melapterus",     "Hemigymnus melapterus",
"Red_Breast",        "Invertivore",     "Cheilinus",           "fasciatus",      "Cheilinus fasciatus",
"Slingjaw",          "Invertivore",     "Epibulus",            "insidiator",     "Epibulus insidiator",
"Sweetlips",         "Invertivore",     "Diagramma/Plectorhinchus", "spp.",     "Diagramma/Plectorhinchus spp.",
"Squirrel.Soldier",  "Invertivore",     "Holocentridae",       "spp.",           "Holocentridae spp.",
"Triggerfish",       "Invertivore",     "Balistidae",          "spp.",           "Balistidae spp.",
"Porcupine.Puffer",  "Invertivore",     "Diodon/Tetraodon",    "spp.",           "Diodon/Tetraodon spp.",
"Ray",               "Mesopredator",    "Taeniura/Neotrygon",  "spp.",           "Taeniura/Neotrygon spp.",
"sml_Snapper",       "Mesopredator",    "Lutjanus",            "spp.",           "Lutjanus (<30cm) spp.",
"lrg_Snapper",       "HTLP",            "Lutjanus",            "spp.",           "Lutjanus (>30 cm) spp.",
"Eel",               "Mesopredator",    "Gymnothorax",         "spp.",           "Gymnothorax spp.",
"Trevally",          "HTLP",            "Caranx",              "spp.",           "Caranx spp.",
"Emperorfish",       "Mesopredator",    "Lethrinus",           "spp.",           "Lethrinus spp.",
"sml_Grouper",       "Mesopredator",    "Cephalopholis/Epinephelus", "spp.",     "Cephalopholis/Epinephelus spp.",
"lrg_Grouper",       "HTLP",            "Epinephelus",         "spp.",           "Epinephelus (>30cm) spp.",
"Barracuda",         "HTLP",            "Sphyraena",           "spp.",           "Sphyraena spp."
)
source("~/Documents/1_GLOBAL REEF/0_PROJECTS/COTSxFISH/3_ANALYSIS/COTSxFISH/01_CLEAN.R")
source("~/Documents/1_GLOBAL REEF/0_PROJECTS/COTSxFISH/3_ANALYSIS/COTSxFISH/02.3_MODEL_SPECIES.R")
summary(fit_spp)
# Ensure Species names match those in the model
valid_responses <- c("Angelfish", "Butterflyfish", "CleanerWrasse", "Emperorfish",
"Parrotfish", "Rabbitfish", "RedBreast", "Slingjaw",
"SquirrelSoldier", "Sweetlips", "Thicklip", "Trevally",
"Triggerfish", "lrgGrouper", "lrgSnapper", "smlGrouper", "smlSnapper")
# If necessary, add this as a column to functional_taxa
functional_taxa <- functional_taxa |>
dplyr::mutate(Resp = gsub("_", "", Species)) |>  # assumes Species was e.g., Red_Breast
dplyr::filter(Resp %in% valid_responses)
# Extract conditional effects using the correct names
ce_list4 <- lapply(functional_taxa$Resp, function(resp) {
ce <- conditional_effects(fit_spp, resp = resp, effects = "cots_density_ha")[[1]]
ce$Resp <- resp
return(ce)
})
# Combine and rejoin sci_name and group
effects_df4 <- bind_rows(ce_list4) %>%
left_join(functional_taxa, by = "Resp")
# Plot per group
plots_by_group4 <- split(effects_df4, effects_df4$Functional_Group)
plots_by_group4 <- lapply(plots_by_group4, function(df) {
ggplot(df, aes(x = cots_density_ha, y = estimate__)) +
geom_line() +
geom_ribbon(aes(ymin = lower__, ymax = upper__), alpha = 0.2) +
facet_wrap(~ sci_name, scales = "free_y") +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Predicted fish density (" * ha^{-1} * ")")
) +
theme_minimal(base_size = 13) + theme_clean +
theme(strip.text = element_text(face = "italic", size = 14))
})
herb_spp <- plots_by_group4$Herbivore
invert_spp <- plots_by_group4$Invertivore
meso_spp <- plots_by_group4$Mesopredator
htlp_spp <- plots_by_group4$HTLP
plot_all_spp <- ggplot(effects_df4, aes(x = cots_density_ha, y = estimate__)) +
geom_line() +
geom_ribbon(aes(ymin = lower__, ymax = upper__), alpha = 0.2) +
facet_wrap(~ sci_name, scales = "free_y") +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Predicted fish density (" * ha^{-1} * ")"),
title = "Species-specific responses to Crown-of-Thorns density"
) +
theme_minimal(base_size = 13) + theme_clean +
theme(
strip.text = element_text(face = "italic", size = 12)
)
print(plot_all_spp)
# Convert wide data to long for raw observations
spp_long <- spp_wide %>%
pivot_longer(cols = all_of(modeled_species),
names_to = "Species",
values_to = "fish_density") %>%
mutate(Resp = gsub("_", "", Species))
plots_by_group5 <- lapply(unique(functional_taxa$Functional_Group), function(group_name) {
df_ce <- effects_df4 %>% filter(Functional_Group == group_name)
df_raw <- spp_long %>%
left_join(functional_taxa, by = "Resp") %>%
filter(Functional_Group == group_name)
ggplot(df_ce, aes(x = cots_density_ha, y = estimate__)) +
geom_point(
data = df_raw,
aes(x = cots_density_ha, y = fish_density),
inherit.aes = FALSE,
alpha = 0.4,
size = 1.3,
color = "black"
) +
geom_line() +
geom_ribbon(aes(ymin = lower__, ymax = upper__), alpha = 0.2) +
facet_wrap(~ sci_name, scales = "free_y") +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Predicted fish density (" * ha^{-1} * ")")
) +
theme_minimal(base_size = 13) + theme_clean +
theme(strip.text = element_text(face = "italic", size = 14))
})
# Rename list so you can access like before
names(plots_by_group5) <- unique(functional_taxa$Functional_Group)
# Access individual groups as before
herb_spp <- plots_by_group5$Herbivore
invert_spp <- plots_by_group5$Invertivore
meso_spp <- plots_by_group5$Mesopredator
htlp_spp <- plots_by_group5$HTLP
print(herb_spp)
print(invert_spp)
print(meso_spp)
print(htlp_spp)
plot_all_spp <- ggplot(effects_df4, aes(x = cots_density_ha, y = estimate__)) +
geom_line() +
geom_ribbon(aes(ymin = lower__, ymax = upper__), fill = "grey", alpha = 0.2) +
facet_wrap(~ sci_name, scales = "free_y") +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Predicted fish density (" * ha^{-1} * ")"),
title = "Species-specific responses to Crown-of-Thorns density"
) +
theme_minimal(base_size = 13) + theme_clean +
theme(
strip.text = element_text(face = "italic", size = 12)
)
print(plot_all_spp)
plots_by_group5 <- lapply(unique(functional_taxa$Functional_Group), function(group_name) {
df_ce <- effects_df4 %>% filter(Functional_Group == group_name)
df_raw <- spp_long %>%
left_join(functional_taxa, by = "Resp") %>%
filter(Functional_Group == group_name)
ggplot(df_ce, aes(x = cots_density_ha, y = estimate__)) +
geom_point(
data = df_raw,
aes(x = cots_density_ha, y = fish_density),
inherit.aes = FALSE,
alpha = 0.4,
size = 1.3,
color = "black"
) +
geom_line() +
geom_ribbon(aes(ymin = lower__, ymax = upper__), fill = "grey", alpha = 0.2) +
facet_wrap(~ sci_name, scales = "free_y") +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Predicted fish density (" * ha^{-1} * ")")
) +
theme_minimal(base_size = 13) + theme_clean +
theme(strip.text = element_text(face = "italic", size = 14))
})
# Rename list so you can access like before
names(plots_by_group5) <- unique(functional_taxa$Functional_Group)
# Access individual groups as before
herb_spp2 <- plots_by_group5$Herbivore
invert_spp2 <- plots_by_group5$Invertivore
meso_spp2<- plots_by_group5$Mesopredator
htlp_spp2 <- plots_by_group5$HTLP
print(herb_spp2)
print(invert_spp2)
print(meso_spp2)
print(htlp_spp2)
print(plot_all_spp)
plot_all_spp <- ggplot(effects_df4, aes(x = cots_density_ha, y = estimate__)) +
geom_point(
data = spp_long_full,
aes(x = cots_density_ha, y = fish_density),
inherit.aes = FALSE,
alpha = 0.4,
size = 1.3,
color = "black"
) +
geom_line() +
geom_ribbon(aes(ymin = lower__, ymax = upper__), alpha = 0.2) +
facet_wrap(~ sci_name, scales = "free_y") +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Predicted fish density (" * ha^{-1} * ")"),
title = "Species-specific responses to Crown-of-Thorns density"
) +
theme_minimal(base_size = 13) + theme_clean +
theme(strip.text = element_text(face = "italic", size = 12))
spp_long_full <- spp_long %>%
left_join(functional_taxa, by = "Resp")
plot_all_spp <- ggplot(effects_df4, aes(x = cots_density_ha, y = estimate__)) +
geom_point(
data = spp_long_full,
aes(x = cots_density_ha, y = fish_density),
inherit.aes = FALSE,
alpha = 0.4,
size = 1.3,
color = "black"
) +
geom_line() +
geom_ribbon(aes(ymin = lower__, ymax = upper__), alpha = 0.2) +
facet_wrap(~ sci_name, scales = "free_y") +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Predicted fish density (" * ha^{-1} * ")"),
title = "Species-specific responses to Crown-of-Thorns density"
) +
theme_minimal(base_size = 13) + theme_clean +
theme(strip.text = element_text(face = "italic", size = 12))
print(plot_all_spp)
plot_all_spp <- ggplot(effects_df4, aes(x = cots_density_ha, y = estimate__)) +
geom_point(
data = spp_long_full,
aes(x = cots_density_ha, y = fish_density),
inherit.aes = FALSE,
alpha = 0.4,
size = 1.3,
color = "black"
) +
geom_line() +
geom_ribbon(aes(ymin = lower__, ymax = upper__), fill="gray",alpha = 0.2) +
facet_wrap(~ sci_name, scales = "free_y") +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Predicted fish density (" * ha^{-1} * ")"),
title = "Species-specific responses to Crown-of-Thorns density"
) +
theme_minimal(base_size = 13) + theme_clean +
theme(strip.text = element_text(face = "italic", size = 12))
print(plot_all_spp)
plot_all_spp <- ggplot(effects_df4, aes(x = cots_density_ha, y = estimate__)) +
geom_line() +
geom_ribbon(aes(ymin = lower__, ymax = upper__), fill = "grey", alpha = 0.2) +
facet_wrap(~ sci_name, scales = "free_y") +
labs(
x = expression("Crown-of-Thorns density (" * ha^{-1} * ")"),
y = expression("Predicted fish density (" * ha^{-1} * ")"),
title = "Species-specific responses to Crown-of-Thorns density"
) +
theme_minimal(base_size = 13) + theme_clean +
theme(
strip.text = element_text(face = "italic", size = 12)
)
print(plot_all_spp)
plot_functional_group_predictions(fit_mv, cotsxfish, cotsxfish_wide)
print(posterior_probs_fg)
# final things
print(ce_with_raw)
spp_wide <- spp_wide %>%
mutate(CoTS_group = case_when(
Site %in% c("Green Rock", "Red Rock", "Twins") ~ "High",
Site %in% c("Aow Leuk", "Shark Island") ~ "Low",
TRUE ~ NA_character_
))
library(tidybayes)
# Add predictions to the original dataset
trigger_preds <- spp_wide %>%
filter(!is.na(CoTS_group)) %>%
add_fitted_draws(fit_spp, dpar = "mu", re_formula = NA, resp = "Triggerfish")  # use re_formula = NA to exclude random effects if comparing populations
str(spp_wide)
spp_wide <- spp_wide %>%
mutate(Site_clean = tolower(Site),
CoTS_group = case_when(
Site_clean %in% c("green rock", "red rock", "twins") ~ "High",
Site_clean %in% c("aow leuk", "shark island") ~ "Low",
TRUE ~ NA_character_
)) %>%
filter(!is.na(CoTS_group))
library(tidybayes)
trigger_preds <- spp_wide %>%
add_epred_draws(fit_spp, resp = "Triggerfish", ndraws = 1000)
ggplot(trigger_preds, aes(x = .value, fill = CoTS_group)) +
geom_density(alpha = 0.5) +
labs(x = "Predicted Triggerfish Density", y = "Density",
title = "Posterior predicted triggerfish densities by CoTS site group") +
theme_minimal()
trigger_preds %>%
group_by(CoTS_group) %>%
summarise(
mean = mean(.value),
median = median(.value),
ci_lower = quantile(.value, 0.025),
ci_upper = quantile(.value, 0.975)
)
ggplot(trigger_preds, aes(x = .epred, fill = CoTS_group)) +
geom_density(alpha = 0.5) +
labs(x = "Predicted Triggerfish Density", y = "Density",
title = "Posterior predicted triggerfish densities by CoTS site group") +
theme_minimal()
trigger_preds %>%
group_by(CoTS_group) %>%
summarise(
mean = mean(.epred),
median = median(.epred),
ci_lower = quantile(.epred, 0.025),
ci_upper = quantile(.epred, 0.975)
)
ggplot(trigger_preds, aes(x = .epred, fill = CoTS_group)) +
geom_density(alpha = 0.5) +
labs(x = "Predicted Triggerfish Density", y = "Density",
title = "Posterior predicted triggerfish densities by CoTS site group") +
xlim(0, 75) +
theme_minimal() + theme_clean
ggplot(trigger_preds, aes(x = .epred, fill = CoTS_group)) +
geom_density(alpha = 0.5) +
labs(x = "Predicted Triggerfish Density", y = "Density",
title = "Posterior predicted triggerfish densities by CoTS site group") +
xlim(0, 75) +
scale_fill_manual(
values = c("High" = "#E69F00", "Low" = "#56B4E9"),
labels = c("High CoTS", "Low CoTS")
) +
theme_minimal() + theme_clean
ggplot(trigger_preds, aes(x = .epred, fill = CoTS_group)) +
geom_density(alpha = 0.5) +
labs(x = "Predicted Triggerfish Density", y = "Density",
title = "Posterior predicted triggerfish densities by CoTS site group") +
xlim(0, 75) +
scale_fill_manual(
values = c("High" = "#E69F00", "Low" = "#56B4E9"),
labels = c("High Density Sites", "Low Density Sites")
) +
theme_minimal() + theme_clean
ggplot(trigger_preds, aes(x = .epred, fill = CoTS_group)) +
geom_density(alpha = 0.5) +
labs(x = "Predicted Triggerfish Density", y = "Density",
title = "Posterior predicted triggerfish densities by CoTS site group") +
xlim(0, 75) +
scale_fill_manual(
values = c("High" = "#006400",  # dark green
"Low" = "#56B4E9"),  # light blue
labels = c("High Density Sites", "Low Density Sites")
) +
theme_minimal() + theme_clean
trigger_preds %>%
group_by(CoTS_group) %>%
summarise(
mean = mean(.epred),
median = median(.epred),
ci_lower = quantile(.epred, 0.025),
ci_upper = quantile(.epred, 0.975)
)
